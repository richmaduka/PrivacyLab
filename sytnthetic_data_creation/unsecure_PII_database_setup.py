# Database setup
# Used to create datasets to experiment with differential privacy
# Run "python dbsetup" with "sql" or "mongodb" argument to choose db type + number of individuals
# code will populate the databse with autogenerated datasets
import yaml
from distutils.log import error
import mysql.connector
import os
import random
import datetime
import Fake_Credit_Card
from dotenv import load_dotenv
from Fake_Credit_Card import Fake_Credit_Card
import database_connect

# load enverioment (.env) file
env_path = os.path.join(".env", "./")
load_dotenv()

# load generator files
lastnames = open('data/lastnames.txt').read().splitlines()
namesF = open('data/namesF.txt').read().splitlines()
namesM = open('data/namesM.txt').read().splitlines()
email_provider = ["gmail.com", "gmail.com", "outlook.com",
                  "icloud.com", "yahoo.com", "gmail.com"]
races = ["asian", "black", "hispanic", "white", "other"]
streets = open('data/streets.txt').read().splitlines()
street_suffix = open('data/street_suffix.txt').read().splitlines()
state_zip_codes = open('data/state_zip_codes.csv').read().splitlines()
cities = open('data/cities.csv').read().splitlines()
random_credit_card = Fake_Credit_Card()
card_types = ["mastercard", "mastercard", "visa",
              "amex", "visa", "discover", "mastercard",
              "diners", "jcb", "enroute", "voyoger"]

# map state to zipcodes in a dict
zipcode_dict = {}
# iterate through states and map zipcode ranges in dict
for state_zip in state_zip_codes:
    split = state_zip.split(",")
    zipcode_dict[split[1]] = split[3]


def create_sql_database(db_name="Health_DP"):
    try:
        mydb = database_connect.sql_connection()
        # execute sql CREATE command
        mycursor = mydb.cursor()
        mycursor.execute(f"CREATE DATABASE IF NOT EXISTS {db_name}")
    except Exception as e:
        error("An error occured while creating database: "+db_name)
        error(e)


def create_email(first_name, last_name):
    # generate random Email
    try:
        email = ""
        em_fmt = random.randint(0, 3)  # email format

        # select format type for emaail
        if em_fmt == 0:
            email += first_name + '.' + last_name + \
                str(random.randint(0, 1000))
        elif em_fmt == 1:
            email += first_name[0] + last_name + str(random.randint(0, 1000))
        elif em_fmt == 2:
            email += first_name + last_name[0] + str(random.randint(0, 1000))
        elif em_fmt == 3:
            email += first_name + last_name + str(random.randint(300, 700))
        elif em_fmt == 3:
            email += first_name + last_name + str(random.randint(300, 700))

        email += "@" + \
            email_provider[random.randint(0, len(email_provider) - 1)]
    except Exception as e:
        error("An error occurred while generating email address.")
    return email


def create_address():
    try:
        # generate random Street
        street = str(random.randint(1, 9999)) + " " + \
            random.choice(streets).title() + " " + random.choice(street_suffix)
        city_and_state = random.choice(cities).split(",")
        city = city_and_state[0]
        state = city_and_state[1]
        zipcode_range = zipcode_dict[state].split("to")
        zipcode = str(random.randint(
            int(zipcode_range[0]), int(zipcode_range[1])))

        # check if zipcode is less than 5
        if len(zipcode) < 5:
            zipcode = "0"+zipcode
    except Exception as e:
        error("An error occured while creating an address.")
        error(e)
    return street, city, state, zipcode


def create_phone_number():
    try:
        phone = ""
        # the first number should be in the range of 6 to 9
        phone += str(random.randint(6, 9))
        # the for loop is used to append the other 9 numbers.
        # the other 9 numbers can be in the range of 0 to 9.
        for digit in range(1, 10):
            if digit == 3:
                phone += '-'
            if digit == 6:
                phone += '-'
            phone += str(random.randint(0, 9))
    except Exception as e:
        error("An error occured while creating a phone number.")
        error(e)
    return phone


def create_dob():
    # generate random date of birth
    start_date = datetime.date(1933, 1, 1)
    end_date = datetime.date(2013, 2, 1)
    time_between_dates = end_date - start_date
    days_between_dates = time_between_dates.days
    random_number_of_days = random.randrange(days_between_dates)
    dob = start_date + datetime.timedelta(days=random_number_of_days)
    return dob


def generate_PII_dataset(credentials: dict = None, table_name="Customers", n: int = 300):
    '''
    Generates synthetic personal identifiable information
    '''

    buffer = []
    mydb = database_connect.sql_connection()
    mycursor = mydb.cursor()

    query = """CREATE TABLE IF NOT EXISTS """+table_name+""" (id INT AUTO_INCREMENT PRIMARY KEY, first_name VARCHAR(255), last_name VARCHAR(255),
    sex VARCHAR(1), isHispanic INT, race VARCHAR(15), dob VARCHAR(30),ssn VARCHAR(11), phone VARCHAR(16), email VARCHAR(255), street VARCHAR(400), city VARCHAR(40), state VARCHAR(30), zipcode VARCHAR(6),
    cc_type VARCHAR(30), cc_number VARCHAR(16), cvv VARCHAR(4), cc_expires VARCHAR(5))"""

    mycursor.execute(query)
    counter = 0

    while counter < n:
        try:
            # choose random sex
            sex_v = random.randint(0, 1)

            # choose random firstname from list
            if sex_v == 0:
                sex = 'F'
                first_name = random.choice(namesF)
            else:
                sex = 'M'
                first_name = random.choice(namesM)

            # choose random lastname from list
            last_name = random.choice(lastnames)

            # assign race
            isHispanic = random.choice([0, 0, 1])

            race = random.choice(races)

            # generate random SSN
            ssn = str(random.randint(111, 888))+"-" + \
                str(random.randint(10, 99))+"-"+str(random.randint(1000, 9998))

            # assign dob
            dob = create_dob()

            # generate random Phone
            phone = create_phone_number()

            # create email from name
            email = create_email(first_name=first_name, last_name=last_name)

            # generate random address, retruns a street, city, state and Zipcode
            street, city, state, zipcode = create_address()

            # increment counter
            counter += 1

            cc_type, cc_number, cvv, cc_expires = random_credit_card.credit_card_number(
                random.choice(card_types), 16)
        except Exception as e:
            # catch exception
            error("An error occured while generating PII data set.")
            error('e')
            n += 1
            continue

        if counter != n-1 and len(buffer) < 15:
            buffer.append([first_name, last_name, sex,
                           isHispanic, race, dob, ssn, phone,
                           email, street, city, state, zipcode,
                           cc_type, cc_number, cvv, cc_expires])
        else:
            sql = """INSERT INTO Customers (first_name, last_name, sex, isHispanic, race, dob, ssn, phone, email, street, city, state, zipcode, cc_type, cc_number, cvv, cc_expires) VALUES (%s, %s, %s,  %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s,%s)"""
            mycursor.executemany(sql, buffer)
            buffer = []
        counter += 1
    mydb.commit()


if __name__ == "__main__":
    print(os.getenv("SQL_HOST"))
    print(os.getenv("SQL_PORT"))
    create_sql_database(db_name="Health_DP")
    generate_PII_dataset()
